<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

   <FontFamily x:Key="FontIcon">Segoe Fluent Icons, Segoe MDL2 Assets</FontFamily>

   <!--#region Window styles -->

   <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
      <Setter Property="Background" Value="{DynamicResource Background}" />
      <Setter Property="WindowState" Value="Normal" />
      <Setter Property="Foreground" Value="{DynamicResource TextForeground}" />
      <Setter Property="WindowChrome.WindowChrome">
         <Setter.Value>
            <WindowChrome GlassFrameThickness="0" CaptionHeight="29" CornerRadius="0" ResizeBorderThickness="4" />
         </Setter.Value>
      </Setter>
   </Style>

   <Style x:Key="BorderWindowStyle" TargetType="{x:Type Border}">
      <Setter Property="BorderThickness" Value="1" />
      <Setter Property="Background" Value="{DynamicResource Background}" />
      <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
      <Style.Triggers>
         <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Normal">
            <Setter Property="BorderThickness" Value="1" />
         </DataTrigger>
         <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Maximized">
            <Setter Property="Padding" Value="8" />
            <Setter Property="BorderThickness" Value="0" />
         </DataTrigger>
      </Style.Triggers>
   </Style>

   <!--#endregion-->

   <!--#region Content styles (Border) -->

   <Style x:Key="ContentPanel" TargetType="{x:Type Border}">
      <Setter Property="Background" Value="{DynamicResource ContentBackground}" />
      <Setter Property="CornerRadius" Value="4" />
      <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
      <Setter Property="BorderThickness" Value="1" />
      <Setter Property="Padding" Value="1" />
      <Setter Property="Effect" Value="{DynamicResource DropShadowEffect1}" />
   </Style>

   <Style x:Key="VerticalSplitterStyle" TargetType="{x:Type GridSplitter}">
      <Setter Property="Width" Value="2" />
      <Setter Property="Margin" Value="2,0" />
      <Setter Property="VerticalAlignment" Value="Stretch" />
      <Setter Property="HorizontalAlignment" Value="Center" />
      <Setter Property="Background" Value="Transparent" />

      <Style.Triggers>
         <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
         </Trigger>
      </Style.Triggers>
   </Style>

   <!--#endregion-->

   <!--#region Menu styles -->

   <Style TargetType="{x:Type MenuItem}">
      <Setter Property="Margin" Value="0" />
      <Setter Property="Padding" Value="6,2" />
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextForeground}" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type MenuItem}">
               <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                  <Grid>
                     <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                     </Grid.ColumnDefinitions>

                     <TextBlock x:Name="Icon" Text="{TemplateBinding Icon}" Margin="5" VerticalAlignment="Center" FontFamily="{StaticResource FontIcon}" />
                     <ContentPresenter x:Name="Header" ContentSource="Header" Grid.Column="1" Margin="5" VerticalAlignment="Center" RecognizesAccessKey="True" />

                     <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Bottom" HorizontalOffset="-6" VerticalOffset="1" PopupAnimation="Fade">
                        <Border BorderThickness="1" Width="128" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource ContentBackground}">
                           <ItemsPresenter x:Name="ItemsPresenter" Margin="0" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Border>
                     </Popup>
                  </Grid>
               </Border>

               <ControlTemplate.Triggers>
                  <Trigger Property="Icon" Value="{x:Null}">
                     <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                  </Trigger>
                  <Trigger Property="IsHighlighted" Value="True">
                     <Setter Property="Background" Value="{DynamicResource ButtonHoverBackground}" />
                  </Trigger>
                  <Trigger Property="IsPressed" Value="True">
                     <Setter Property="Background" Value="{DynamicResource ButtonPressedBackground}" />
                  </Trigger>
                  <Trigger Property="IsEnabled" Value="False">
                     <Setter TargetName="Icon" Property="Opacity" Value="0.5" />
                     <Setter Property="Foreground" Value="Gray" />
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!--#endregion-->

   <!--#region TreeView styles -->

   <Style x:Key="TreeViewItemToggleStyle" TargetType="{x:Type ToggleButton}">
      <Setter Property="Padding" Value="5,0" />
      <Setter Property="BorderThickness" Value="0" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
               <Grid Width="15" Height="13" Background="Transparent">
                  <VisualStateManager.VisualStateGroups>
                     <VisualStateGroup x:Name="CheckStates">
                        <VisualState x:Name="Checked">
                           <Storyboard>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Collapsed">
                                 <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Expanded">
                                 <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                              </ObjectAnimationUsingKeyFrames>
                           </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Unchecked">
                           <Storyboard>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Collapsed">
                                 <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Expanded">
                                 <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                              </ObjectAnimationUsingKeyFrames>
                           </Storyboard>
                        </VisualState>
                        <VisualState x:Name="Indeterminate" />
                     </VisualStateGroup>
                  </VisualStateManager.VisualStateGroups>

                  <!-- Change themed color -->
                  <Path x:Name="Expanded" Fill="#666" Data="M 0,4 L 4,0 L 8,4 Z" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                  <Path x:Name="Collapsed" Fill="#666" Data="M 0,0 L 8,0 L 4,4 Z" VerticalAlignment="Center" HorizontalAlignment="Center"/>
               </Grid>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type TreeView}">
      <Setter Property="Background" Value="Transparent"/>
      <Setter Property="BorderThickness" Value="0"/>
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type TreeView}">
               <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                  <ScrollViewer>
                     <ItemsPresenter/>
                  </ScrollViewer>
               </Border>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type TreeViewItem}">
      <Setter Property="Background" Value="Transparent"/>
      <Setter Property="HorizontalContentAlignment" Value="Left"/>
      <Setter Property="VerticalContentAlignment" Value="Center"/>
      <Setter Property="Padding" Value="4"/>
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type TreeViewItem}">
               <Grid>
                  <Grid.ColumnDefinitions>
                     <ColumnDefinition Width="Auto" />
                     <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                     <RowDefinition />
                     <RowDefinition />
                  </Grid.RowDefinitions>

                  <ToggleButton x:Name="Expander" Style="{StaticResource TreeViewItemToggleStyle}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />

                  <Border x:Name="Bd"
                          Grid.Column="1"
                          Padding="{TemplateBinding Padding}"
                          Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True">

                     <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                  </Border>

                  <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2" Visibility="Collapsed"/>
               </Grid>
               <ControlTemplate.Triggers>
                  <Trigger Property="HasItems" Value="False">
                     <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                  </Trigger>
                  <Trigger Property="IsExpanded" Value="True">
                     <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/>
                  </Trigger>
                  <Trigger Property="IsSelected" Value="True">
                     <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!--#endregion-->

   <!--#region TabControl styles (Uniform) -->
   
   <Style x:Key="TabControlUniformStyle" TargetType="{x:Type TabControl}">
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="BorderThickness" Value="0" />
      <Setter Property="SnapsToDevicePixels" Value="True" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabControl}">
               <Grid>
                  <Grid.RowDefinitions>
                     <RowDefinition Height="Auto" />
                     <RowDefinition Height="*" />
                  </Grid.RowDefinitions>

                  <Border>
                     <UniformGrid IsItemsHost="True" HorizontalAlignment="Stretch" Rows="1" />
                  </Border>

                  <Border x:Name="Border" Grid.Row="1"
                       BorderThickness="{TemplateBinding BorderThickness}"
                       Background="{TemplateBinding Background}"
                       BorderBrush="{TemplateBinding BorderBrush}">
                     <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" />
                  </Border>
               </Grid>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type TabItem}">
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="BorderThickness" Value="0,0,0,2" />
      <Setter Property="Foreground" Value="{DynamicResource TextForeground}" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
               <Border Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="10,5">

                  <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" />
               </Border>
               <ControlTemplate.Triggers>
                  <Trigger Property="IsSelected" Value="True">
                     <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                     <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
                  </Trigger>
                  <!--<Trigger Property="IsMouseOver" Value="True">
                     <Setter Property="Foreground" Value="{DynamicResource TextForeground2}" />
                  </Trigger>-->
                  <Trigger Property="IsEnabled" Value="False">
                     <Setter Property="Foreground" Value="{DynamicResource TextInactiveForeground}" />
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!--#endregion-->

   <!--#region ScrollBar styles -->

   <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
               <Grid x:Name="Grid">
                  <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="Transparent" />
                  <Border x:Name="Rectangle1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" />
               </Grid>
               <ControlTemplate.Triggers>
                  <Trigger Property="Tag" Value="Horizontal">
                     <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Style TargetType="{x:Type ScrollBar}">
      <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource ButtonHoverBackground}" />
      <Setter Property="Width" Value="6" />
      <Setter Property="Opacity" Value="1" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
               <Grid x:Name="GridRoot" Width="{TemplateBinding Width}" Background="{TemplateBinding Background}">
                  <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="True" Focusable="False">
                     <Track.Thumb>
                        <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                     </Track.Thumb>
                     <Track.IncreaseRepeatButton>
                        <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="False" />
                     </Track.IncreaseRepeatButton>
                     <Track.DecreaseRepeatButton>
                        <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="False" />
                     </Track.DecreaseRepeatButton>
                  </Track>
               </Grid>
               <ControlTemplate.Triggers>
                  <Trigger SourceName="Thumb" Property="IsMouseOver" Value="True">
                     <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource ButtonHoverBackground}" />
                  </Trigger>
                  <Trigger SourceName="Thumb" Property="IsDragging" Value="True">
                     <Setter TargetName="Thumb" Property="Background" Value="{DynamicResource ButtonPressedBackground}" />
                  </Trigger>
                  <Trigger Property="Orientation" Value="Horizontal">
                     <Setter TargetName="GridRoot" Property="LayoutTransform">
                        <Setter.Value>
                           <RotateTransform Angle="-90" />
                        </Setter.Value>
                     </Setter>
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
      <Style.Triggers>
         <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Width" Value="10" />
            <Setter Property="Opacity" Value="1" />
         </Trigger>
      </Style.Triggers>
   </Style>

   <!--#endregion-->

</ResourceDictionary>